compile yes.cpp with:
x86_64-w64-mingw32-g++ yes.cpp -fconcepts-ts -static -lgdi32 -Ofast -o yes

in calculating whether the line hits the sphere:
if(square(dot_product(ux, uy, uz, circle_x, circle_y, circle_z)) - circle_x * circle_x - circle_y * circle_y - circle_z * circle_z + radius * radius < 0) framebuf[j * width + i] = RGB(255, 0, 0);
else framebuf[j * width + i] = RGB(0, 0, 255);

random stuff:
point c1(-150, 100, 2000), c2(150, 100, 2000), c3(150, -100, 2000);
vector a = c2 - c1, b = c3 - c1, c = cross_product(a, b);
ax + by + cz = k
double k = c.x * a.x + c.y * a.y + c.z * a.z;

earlier testing:
double x = ux * t;
double y = uy * t;
double z = uz * t;
std::cout << "hello " << x << '\n';
if(x < -250 || x > 250) framebuf[j * width + i] = RGB(255, 0, 0);
else framebuf[j * width + i] = RGB(0, 0, 255);

above class sphere in global scope:
double inv_sqrt(double number){
    int64_t i;
    double x2, f;

    x2 = number * 0.5F;
    f  = number;
    i  = *(int64_t*)&f;                 // evil bit hacks
    i  = 0x5fe6eb50c7b537a9 - (i >> 1); // what the heck?
    f  = *(double*)&i;
    f  = f * (1.5F - (x2 * f * f));

    return f;
}

in sphere hit() function:

//double magnitude = sqrt(u.x * u.x + u.y * u.y + u.z * u.z);
//u.x /= magnitude, u.y /= magnitude, u.z /= magnitude;
double yes = inv_sqrt(u.x * u.x + u.y * u.y + u.z * u.z);
u.x *= yes, u.y *= yes, u.z *= yes;

double dot = dot_product(u.x, u.y, u.z, center.x, center.y, center.z);
double determinant = dot * dot - center.x * center.x - center.y * center.y - center.z * center.z + radius * radius;
return std::pair<bool, double>(determinant >= 0, -dot - sqrt(determinant));

in sphere is_in_frustum() function:

for(point& i : plane[c]) i -= center;

vector a = plane[c][1] - plane[c][0], b = plane[c][2] - plane[c][0];
// literally just the cross product btw
double i = a.y * b.z - a.z * b.y,
	   j = a.x * b.z - a.z * b.x,
	   k = a.x * b.y - a.y * b.x;
double d = i * -plane[c][0].x + j * -plane[c][0].y + k * -plane[c][0].z;

//todo: its always printing the same result
std::cout << d / sqrt(i * i + j * j + k * k) << '\n';
if(d / sqrt(i * i + j * j + k * k) < radius) return true;

at the end:
bool in = d / (i * i + j * j + k * k) < radius;
return d / (i * i + j * j + k * k) < radius; //for now
return in;
return true;

in polygon hit() function (to calculate whether a point is in a triangle):

auto sign = [&](point p1, point p2, point p3) -> double{
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
};
double d1 = sign(intersection, c1, c2),
       d2 = sign(intersection, c2, c3),
       d3 = sign(intersection, c3, c1);
bool neg = d1 < 0 || d2 < 0 || d3 < 0,
     pos = d1 > 0 || d2 > 0 || d3 > 0;
if(!(neg && pos)) framebuf[j * width + i] = RGB(0, 0, 255);
else framebuf[j * width + i] = RGB(255, 0, 0);
                *

auto point_in_triangle = [&](point p, point a, point b, point c) -> bool{
    if(c.y == a.y){
        point temp = c;
        c = b;
        b = temp;
    }
    double s1 = c.y - a.y,
           s2 = c.x - a.x,
           s3 = b.y - a.y,
           s4 = p.y - a.y;
    double w1 = (a.x * s1 + s4 * s2 - p.x * s1) / (s3 * s2 - (b.x - a.x) * s1),
           w2 = (s4 - w1 * s3) / s1;
    return w1 >= 0 && w2 >= 0 && (w1 + w2) <= 1;
};

in donut hit() function (doesnt work):

std::cout << "hello\n";

double magnitude_squared = u.x * u.x + u.y * u.y + u.z * u.z;
double a = magnitude_squared * magnitude_squared,
       b = 4 * magnitude_squared * (-center.x * u.x - center.y * u.y - center.z * u.z),
       c = (-center.x * 2 * (3 * u.x * u.x + u.y * u.y + u.z * u.z) + u.x * 8 * (-center.y * u.y + epsilon * u.z)) + u.x * u.x * (2 * center.y * center.y + epsilon * (2 * epsilon + 2)) + 2 * (-2 * u.x * u.x + major_radius * major_radius + u.y * u.y * (3 * center.y * center.y - 2 * major_radius * major_radius + epsilon * epsilon + epsilon) + u.z * u.z * (center.y * center.y + 3 * epsilon * epsilon + epsilon) + 4 * -center.y * u.y * epsilon * u.z),
       d = 4 * (-center.x * center.x * center.x * u.x + center.x * center.x * (-center.y * u.y + -center.z * u.z) + -center.x * u.x * (center.y * center.y + epsilon + center.z * center.z) - center.y * center.y * center.y * u.y - 2 * -center.x * u.x * major_radius * major_radius - center.z * u.z * (center.y * center.y + epsilon + center.z * center.z) + -center.y * u.y * (-2 * major_radius * major_radius + epsilon + center.z * center.z)),
       e = center.x * center.x * center.x * center.x + 2 * center.x * center.x * (center.y * center.y + epsilon + center.z * center.z) + center.y * center.y * center.y * center.y + 2 * center.y * center.y * epsilon - 4 * center.x * center.x * major_radius * major_radius + 2 * center.y * center.y * (center.z * center.z - 2 * major_radius * major_radius) + (epsilon + center.z * center.z) * (epsilon + center.z * center.z);
//double a = 4, b = 9, c = 8, d = 2, e = 7;
b /= a;
c /= a;
d /= a;
e /= a;
//a = 1;

(this isnt right):
a = _b*_b*_b*_b + 2*_b*_b*_d*_d + _f*_f*_f*_f + 2*_b*_b*_f*_f + 2*_d*_d*_f*_f + _f*_f*_f*_f;
b = 4*_a*_b*_b*_b + 4*_b*_b*_c*_d + 4*_e*_f*_f*_f + 4*_e*_b*_b*_f + 4*_a*_b*_f*_f + 4*_c*_d*_f*_f + 4*_e*_d*_d*_f + 4*_e*_f*_f*_f;
c = 6*_a*_a*_b*_b + 2*_b*_b*_c*_c + 8*_a*_b*_c*_d + 2*_a*_a*_d*_d + 4*_a*_b*_d*_d + 6*_e*_e*_f*_f + 2*_e*_e*_b*_b + 8*_e*_a*_b*_f + 2*_a*_a*_f*_f + 2*_c*_c*_f*_f + 8*_e*_c*_d*_f + 2*_e*_e*_d*_d + 6*_e*_e*_f*_f + 2*_b*_b*epsilon + 2*_d*_d*epsilon + 2*_f*_f*epsilon - 4*_b*_b*major_radius*major_radius - 4*_d*_d*major_radius*major_radius;
d = 4*_a*_a*_a*_b + 4*_a*_b*_c*_c + 4*_a*_a*_c*_d + 4*_e*_e*_a*_b + 4*_e*_a*_a*_f + 4*_e*_c*_c*_f + 4*_e*_e*_c*_d + 4*_a*_b*epsilon + 4*_c*_d*epsilon + 4*_e*_f*epsilon - 8*_e*_e*_e*_f - 8*_a*_b*major_radius*major_radius - 8*_c*_d*major_radius*major_radius;
e = _a*_a*_a*_a + 2*_a*_a*_c*_c + _e*_e*_e*_e + 2*_e*_e*_a*_a + 2*_a*_a*epsilon + 2*_e*_e*_c*_c + 2*_c*_c*epsilon + _e*_e*_e*_e + 2*_e*_e*epsilon - 4*_a*_a*major_radius*major_radius - 4*_c*_c*major_radius*major_radius;

(idk wtf this was):
u -= center;
alpha = u.x * u.x + u.y * u.y + u.z * u.z;
double a = alpha * alpha, b = 2 * (alpha * epsilon - 2 * major_radius * (/* using center instead of u here produces funny pattern */ u.x * u.x + u.y * u.y)), c = epsilon * epsilon,
       discriminant = b * b - 4 * a * c;
if(discriminant < 0){return std::pair<bool, double>(false, 0);}
double l = discriminant / (2 * a);
if(l < b){return std::pair<bool, double>(false, 0);}
return std::pair<bool, double>(true, 0);

in windowprocessmessages (i forgot what this is supposed to do):
case WM_GETMINMAXINFO:{
    LPMINMAXINFO e = (LPMINMAXINFO)l;
    //e->ptMinTrackSize.x = 7;
    //e->ptMinTrackSize.y = 30;

    //e->ptMinTrackSize.x = 17;
    //e->ptMinTrackSize.y = 40;
    break;
}

above render() in global scope:

auto comp = [](bool& hit_nothing, vector v, object* a, object *b){
    // bagel supremacy
    std::pair<bool, double> hit_a = a->hit(v), hit_b = b->hit(v);

    //if(unlikely(hit_a.first && hit_b.first)){
    //    hit_nothing = false;
    //    return hit_a.second < hit_b.second;
    //}
    //if(unlikely(hit_a.first)){
    //    hit_nothing = false;
    //    return true;
    //}
    // //if(unlikely(hit_b.first)) hit_nothing = false;
    //hit_nothing = !hit_b.first;
    //return false;

    if(unlikely(hit_a.first)){
        hit_nothing = false;
        if(unlikely(hit_b.first)) return hit_a.second < hit_b.second;
        return true;
    }
    //if(unlikely(hit_b.first)) hit_nothing = false;
    hit_nothing = !hit_b.first;
    return false;
};

in render():

    in yaw angle rotating (its spaghetti):
    double temp = vx;
    vx = cos(yaw_angle_radians) * vx - sin(yaw_angle_radians) * vy;
    vy = sin(yaw_angle_radians) * temp + cos(yaw_angle_radians) * vy;
    vx -= vz * sin(yaw_angle_radians);

    yaw_angle_radians = yaw_angle_radians - (yaw_angle_radians > 6.28318) * 6.28318;
    std::cout << yaw_angle_radians << '\n';
    vx += vz * sin(yaw_angle_radians) * ((yaw_angle_radians > 1.5708 && yaw_angle_radians < 4.71239) ? -1 : 1);
    //tan undefined at 90 deg and 270 deg
    vx += vz * tan(yaw_angle_radians);
    std::cout << vx << '\n';

vector v(-width / 2.0 + i, height / 2.0 - j, z);

use x86_64-w64-mingw32-g++ for better performance
auto start = high_resolution_clock::now();

std::pair<bool, double> hit_s = (world[0])->hit(v);
bool hit_sphere = hit_s.first;
double distance_to_sphere = hit_s.second;

std::pair<bool, double> hit_p = (world[1])->hit(v);
bool hit_polygon = hit_p.first;
double distance_to_polygon = hit_p.second;

auto stop = high_resolution_clock::now();
duration<double, std::milli> time_double = stop - start;
if(time_double.count()) std::cout << "count: " << time_double.count() << '\n';
std::cout << "count: " << time_double.count() << '\n';
for multiple objects create a list of objects the ray hit
with either inheritance or std::any or smth
and find which of the distances is least

bool hit_nothing = true;
object* smallest = world[0];

for(int w = 1; w < world.size(); ++w){
    //if(comp(hit_nothing, v, world[i], smallest)) smallest = world[i];
    std::pair<bool, double> hit_a = world[w]->hit(v), hit_b = smallest->hit(v);
    //std::pair<bool, double> hit_a(0, 0), hit_b(0, 0);

    if(unlikely(hit_a.first)){
        hit_nothing = false;
        if(unlikely(hit_b.first)){
            if(hit_a.second < hit_b.second)
                smallest = world[w];
        }
        else smallest = world[w];
    }
    else hit_nothing = !hit_b.first;
}
if(likely(hit_nothing)) framebuf[j * width + i] = RGB(255, 0, 0);
else framebuf[j * width + i] = smallest->clr;

(check if hit sphere or polygon):
if(unlikely(hit_sphere)){
    if(unlikely(hit_polygon)){
        if(hit_s.second < hit_p.second) framebuf[j * width + i] = RGB(0, 255, 0);
        else framebuf[j * width + i] = RGB(0, 0, 255);
    }
    else framebuf[j * width + i] = RGB(0, 255, 0);
}
else if(unlikely(hit_polygon)) framebuf[j * width + i] = RGB(0, 0, 255);
else framebuf[j * width + i] = RGB(255, 0, 0);

//if(unlikely(hit_sphere || hit_polygon)) framebuf[j * width + i] = RGB(0, 0, 255);
//else framebuf[j * width + i] = RGB(255, 0, 0);

in main function (height of the window testing):
//int a = width + 2, b = height + 29;
//int a = width + 2, b = height + 25;
(its supposed to be: int a = width + 16, b = height + 39;)
